import AsyncStorage from '@react-native-async-storage/async-storage';
import React, {useState, useCallback, useRef, useEffect} from 'react';
import {
  View,
  Dimensions,
  Alert,
  TouchableOpacity,
  Text,
  ActivityIndicator,
} from 'react-native';
import {
  GestureDetector,
  Gesture,
  GestureHandlerRootView,
} from 'react-native-gesture-handler';
import Animated, {
  useAnimatedStyle,
  useSharedValue,
  withSpring,
  runOnJS,
} from 'react-native-reanimated';
import {captureRef} from 'react-native-view-shot';

const {width: screenWidth} = Dimensions.get('window');

const ImageCropper = ({
  imageUri,
  fileId,
  onCropComplete,
  containerWidth = screenWidth * 0.8,
  autoGenerateDelay = 500,
}) => {
  const cropWidth = containerWidth;
  const cropHeight = (containerWidth * 4) / 3;

  const cropViewRef = useRef();
  const autoGenerateTimeoutRef = useRef(null);

  const scale = useSharedValue(1);
  const savedScale = useSharedValue(1);
  const translateX = useSharedValue(0);
  const translateY = useSharedValue(0);
  const savedTranslateX = useSharedValue(0);
  const savedTranslateY = useSharedValue(0);

  const minScale = useSharedValue(0.5);
  const maxScale = useSharedValue(5);

  const [imageDimensions, setImageDimensions] = useState({width: 0, height: 0});
  const [isGenerating, setIsGenerating] = useState(false);
  const [isImageLoading, setIsImageLoading] = useState(true);
  const [cropData, setCropData] = useState({});
  const [isInitialized, setIsInitialized] = useState(false);
  const [hasGeneratedInitialCrop, setHasGeneratedInitialCrop] = useState(false);

  useEffect(() => {
    const loadCropData = async () => {
      try {
        const storedData = await AsyncStorage.getItem('cropData');
        if (storedData) {
          setCropData(JSON.parse(storedData));
        }
      } catch (error) {
        console.error('Error loading crop data:', error);
      }
    };
    loadCropData();
  }, []);

  useEffect(() => {
    const saveCropData = async () => {
      try {
        await AsyncStorage.setItem('cropData', JSON.stringify(cropData));
      } catch (error) {
        console.error('Error saving crop data:', error);
      }
    };
    if (Object.keys(cropData).length > 0) {
      saveCropData();
    }
  }, [cropData]);

  useEffect(() => {
    if (imageUri && fileId && !cropData[fileId]) {
      setCropData(prev => ({
        ...prev,
        [fileId]: {
          crop: {x: 0, y: 0},
          zoom: 0,
          minZoom: 0,
          translateX: 0,
          translateY: 0,
          scale: 0,
        },
      }));
    }
  }, [fileId, imageUri, cropData]);

  useEffect(() => {
    if (imageUri) {
      setIsImageLoading(true);
      setIsInitialized(false);
      setHasGeneratedInitialCrop(false);
    }
  }, [imageUri, fileId]);

  const calculateInitialScale = useCallback(() => {
    if (!imageDimensions.width || !imageDimensions.height) return 1;

    const scaleX = cropWidth / imageDimensions.width;
    const scaleY = cropHeight / imageDimensions.height;

    // Use Math.max to fill the container completely (no empty space)
    return Math.max(scaleX, scaleY);
  }, [cropWidth, cropHeight, imageDimensions]);

  const autoGenerateCroppedImage = useCallback(async () => {
    if (
      !imageDimensions.width ||
      !imageDimensions.height ||
      !cropViewRef.current ||
      isGenerating
    ) {
      return;
    }

    try {
      setIsGenerating(true);

      const uri = await captureRef(cropViewRef.current, {
        format: 'jpg',
        quality: 1,
        width: cropWidth * 2,
        height: cropHeight * 2,
      });

      if (onCropComplete) {
        onCropComplete(fileId, uri);
      }

      return uri;
    } catch (error) {
      console.error('Error auto-generating cropped image:', error);
    } finally {
      setIsGenerating(false);
    }
  }, [
    imageDimensions,
    cropWidth,
    cropHeight,
    onCropComplete,
    fileId,
    isGenerating,
  ]);

  const scheduleAutoGeneration = useCallback(() => {
    if (!hasGeneratedInitialCrop) return;

    if (autoGenerateTimeoutRef.current) {
      clearTimeout(autoGenerateTimeoutRef.current);
    }

    autoGenerateTimeoutRef.current = setTimeout(() => {
      autoGenerateCroppedImage();
    }, autoGenerateDelay);
  }, [autoGenerateCroppedImage, autoGenerateDelay, hasGeneratedInitialCrop]);

  const applySavedCropState = useCallback(() => {
    if (cropData[fileId] && imageDimensions.width && imageDimensions.height) {
      const savedCropState = cropData[fileId];

      if (savedCropState.scale && savedCropState.scale > 0) {
        scale.value = savedCropState.scale;
        savedScale.value = savedCropState.scale;
        translateX.value = savedCropState.translateX || 0;
        translateY.value = savedCropState.translateY || 0;
        savedTranslateX.value = savedCropState.translateX || 0;
        savedTranslateY.value = savedCropState.translateY || 0;
      } else {
        const initialScale = calculateInitialScale();

        scale.value = initialScale;
        savedScale.value = initialScale;
        translateX.value = 0;
        translateY.value = 0;
        savedTranslateX.value = 0;
        savedTranslateY.value = 0;
      }
    } else {
      const initialScale = calculateInitialScale();

      scale.value = initialScale;
      savedScale.value = initialScale;
      translateX.value = 0;
      translateY.value = 0;
      savedTranslateX.value = 0;
      savedTranslateY.value = 0;
    }

    setIsInitialized(true);
  }, [cropData, fileId, imageDimensions, calculateInitialScale]);

  const handleImageLoad = useCallback(event => {
    const {width, height} = event.nativeEvent.source;
    setImageDimensions({width, height});

    setIsImageLoading(false);
  }, []);

  useEffect(() => {
    if (
      !isImageLoading &&
      imageDimensions.width &&
      imageDimensions.height &&
      !isInitialized
    ) {
      applySavedCropState();
    }
  }, [isImageLoading, imageDimensions, isInitialized, applySavedCropState]);

  useEffect(() => {
    if (
      isInitialized &&
      !isImageLoading &&
      !hasGeneratedInitialCrop &&
      cropData[fileId]?.scale > 0
    ) {
      setTimeout(() => {
        autoGenerateCroppedImage();
        setHasGeneratedInitialCrop(true);
      }, 100);
    }
  }, [
    isInitialized,
    isImageLoading,
    hasGeneratedInitialCrop,
    cropData,
    fileId,
    autoGenerateCroppedImage,
  ]);

  const handleImageError = useCallback(() => {
    setIsImageLoading(false);
    Alert.alert('Error', 'Failed to load image');
  }, []);

  const saveCropStateAndAutoGenerate = useCallback(() => {
    if (fileId) {
      setCropData(prev => ({
        ...prev,
        [fileId]: {
          ...prev[fileId],
          scale: scale.value,
          translateX: translateX.value,
          translateY: translateY.value,
        },
      }));
    }

    scheduleAutoGeneration();
  }, [fileId, scheduleAutoGeneration]);

  const constrainTranslation = useCallback(
    (x, y, currentScale) => {
      'worklet';
      if (!imageDimensions.width || !imageDimensions.height) return {x, y};

      const scaledWidth = imageDimensions.width * currentScale;
      const scaledHeight = imageDimensions.height * currentScale;

      const maxTranslateX = Math.max(0, (scaledWidth - cropWidth) / 2);
      const maxTranslateY = Math.max(0, (scaledHeight - cropHeight) / 2);

      const constrainedX = Math.max(-maxTranslateX, Math.min(maxTranslateX, x));
      const constrainedY = Math.max(-maxTranslateY, Math.min(maxTranslateY, y));

      return {x: constrainedX, y: constrainedY};
    },
    [cropWidth, cropHeight, imageDimensions],
  );

  const panGesture = Gesture.Pan()
    .onStart(() => {
      savedTranslateX.value = translateX.value;
      savedTranslateY.value = translateY.value;
    })
    .onUpdate(event => {
      const newX = savedTranslateX.value + event.translationX;
      const newY = savedTranslateY.value + event.translationY;

      const constrained = constrainTranslation(newX, newY, scale.value);
      translateX.value = constrained.x;
      translateY.value = constrained.y;
    })
    .onEnd(() => {
      const constrained = constrainTranslation(
        translateX.value,
        translateY.value,
        scale.value,
      );
      translateX.value = withSpring(constrained.x);
      translateY.value = withSpring(constrained.y);

      runOnJS(saveCropStateAndAutoGenerate)();
    });

  const pinchGesture = Gesture.Pinch()
    .onStart(() => {
      savedScale.value = scale.value;
    })
    .onUpdate(event => {
      const newScale = savedScale.value * event.scale;

      if (newScale >= minScale.value && newScale <= maxScale.value) {
        scale.value = newScale;
      }
    })
    .onEnd(() => {
      const constrained = constrainTranslation(
        translateX.value,
        translateY.value,
        scale.value,
      );
      translateX.value = withSpring(constrained.x);
      translateY.value = withSpring(constrained.y);
      scale.value = withSpring(scale.value);

      runOnJS(saveCropStateAndAutoGenerate)();
    });

  const composedGesture = Gesture.Simultaneous(panGesture, pinchGesture);

  const animatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {translateX: translateX.value},
        {translateY: translateY.value},
        {scale: scale.value},
      ],
    };
  });

  const resetTransform = useCallback(() => {
    if (!imageDimensions.width || !imageDimensions.height) return;

    const initialScale = calculateInitialScale();

    scale.value = withSpring(initialScale, {}, isFinished => {
      if (isFinished && hasGeneratedInitialCrop) {
        runOnJS(scheduleAutoGeneration)();
      }
    });

    savedScale.value = initialScale;
    translateX.value = withSpring(0);
    translateY.value = withSpring(0);
    savedTranslateX.value = 0;
    savedTranslateY.value = 0;

    setCropData(prev => ({
      ...prev,
      [fileId]: {
        ...prev[fileId],
        scale: initialScale,
        translateX: 0,
        translateY: 0,
      },
    }));
  }, [
    calculateInitialScale,
    fileId,
    scheduleAutoGeneration,
    hasGeneratedInitialCrop,
  ]);

  useEffect(() => {
    if (imageDimensions.width && imageDimensions.height) {
      const initialScale = calculateInitialScale();
      minScale.value = initialScale;
    }
  }, [imageDimensions, calculateInitialScale, minScale]);

  useEffect(() => {
    return () => {
      if (autoGenerateTimeoutRef.current) {
        clearTimeout(autoGenerateTimeoutRef.current);
      }
    };
  }, []);

  return (
    <GestureHandlerRootView style={styles.container}>
      <View
        ref={cropViewRef}
        style={[styles.cropContainer, {width: cropWidth, height: cropHeight}]}>
        {(isImageLoading || !isInitialized) && (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#e93c00" />
            <Text style={styles.loadingText}>
              {isImageLoading ? 'Loading image...' : 'Initializing...'}
            </Text>
          </View>
        )}

        <GestureDetector gesture={composedGesture}>
          <Animated.View style={styles.gestureContainer}>
            <Animated.Image
              source={{uri: imageUri}}
              style={[
                {
                  width: imageDimensions.width || cropWidth,
                  height: imageDimensions.height || cropHeight,
                  opacity: isImageLoading || !isInitialized ? 0 : 1,
                },
                animatedStyle,
              ]}
              onLoad={handleImageLoad}
              onError={handleImageError}
              resizeMode="contain"
            />
          </Animated.View>
        </GestureDetector>
      </View>

      <View
        style={[styles.cropOverlay, {width: cropWidth, height: cropHeight}]}
        pointerEvents="none">
        <View style={styles.cropBorder} />
      </View>

      <View style={styles.controls}>
        <TouchableOpacity
          style={[
            styles.button,
            (isImageLoading || !isInitialized) && styles.disabledButton,
          ]}
          onPress={resetTransform}
          disabled={isImageLoading || !isInitialized}>
          <Text style={styles.buttonText}>Reset</Text>
        </TouchableOpacity>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = {
  container: {
    alignItems: 'center',
    padding: 20,
  },
  cropContainer: {
    backgroundColor: '#000',
    overflow: 'hidden',
    borderRadius: 8,
    position: 'relative',
    justifyContent: 'center',
    alignItems: 'center',
  },
  gestureContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  cropOverlay: {
    position: 'absolute',
    top: 20,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 8,
  },
  cropBorder: {
    width: '100%',
    height: '100%',
    borderRadius: 8,
  },
  loadingContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    zIndex: 1,
  },
  loadingText: {
    color: '#fff',
    marginTop: 10,
    fontSize: 16,
  },
  controls: {
    marginTop: 20,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    gap: 15,
  },
  button: {
    backgroundColor: '#6c757d',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
  },
  disabledButton: {
    backgroundColor: '#cccccc',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  statusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  statusText: {
    color: '#666',
    fontSize: 14,
  },
};

export default ImageCropper;
